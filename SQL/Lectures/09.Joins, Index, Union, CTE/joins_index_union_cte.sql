/* -------------- JOINS ------------------*/

-- A join is a method of linking data between one or more tables based on values of the common column between the tables.

-- create database
CREATE DATABASE OPERATION;
USE OPERATION;


CREATE TABLE IF NOT EXISTS COURSE (
	COURSE_ID INT,
	COURSE_NAME VARCHAR(50),
	COURSE_DESC VARCHAR(60),
	COURSE_TAG VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS STUDENT (
	STUDENT_ID INT,
	STUDENT_NAME VARCHAR(30),
	STDUENT_MOBILE INT,
	STUDENT_COURSE_ENROLL VARCHAR(30),
	STUDENT_COURSE_ID INT
);

INSERT INTO COURSE VALUES
(101 , 'FSDA' , 'FULL STACK DATA ANALYTICS' , 'ANALYTICS'),
(102 , 'FSDS' , 'FULL STACK DATA ANALYTICS' , 'ANALYTICS'),
(103 , 'FSDS' , 'FULL STACK DATA SCIENCE' , 'DS'),
(104 , 'BIG DATA' , 'FULL STACK BIG DATA' , 'BD'),
(105 , 'MERN' , 'WEB DEV' , 'MERN'),
(106 , 'BLOCKCHAIN' , 'FULL STACK BLOCKCHAIN' , 'BC'),
(101 , 'JAVA' , 'FULL STACK JAVA' , 'JAVA'),
(102 , 'TESTING' , 'FULL TESTING ' , 'TESTING '),
(105 , 'CYBERSECURITY' , 'FULL STACK CYBERSECURITY' , 'CYBERSECURITY'),
(109 , 'C' , 'C LANGUAGE' , 'C'),
(108 , 'C++' , 'C++ LANGUAGE' , 'LANGUAGE');

INSERT INTO STUDENT VALUES(301 , "SUDHANSHU", 3543453,'YES', 101),
(302 , "SUDHANSHU", 3543453,'YES', 102),
(301 , "SUDHANSHU", 3543453,'YES', 105),
(302 , "SUDHANSHU", 3543453,'YES', 106),
(303 , "SUDHANSHU", 3543453,'YES', 101),
(304 , "SUDHANSHU", 3543453,'YES', 103),
(305 , "SUDHANSHU", 3543453,'YES', 105),
(306 , "SUDHANSHU", 3543453,'YES', 107),
(306 , "SUDHANSHU", 3543453,'YES', 103);


SELECT * FROM COURSE;
SELECT * FROM STUDENT;


-- 1. INNER JOIN
-- The INNER JOIN matches each row in one table with every row in other tables and allows you to query rows that contain columns from both tables.
SELECT C.COURSE_ID, C.COURSE_NAME, C.COURSE_DESC, S.STUDENT_ID, S.STUDENT_NAME
FROM COURSE C 
INNER JOIN STUDENT S
ON C.COURSE_ID = S.STUDENT_COURSE_ID;


-- 2. LEFT JOIN
-- LEFT JOIN returns all rows from the left table regardless of whether a row from the left table has a matching row from the right table or not.
SELECT C.COURSE_ID, C.COURSE_NAME, C.COURSE_DESC, S.STUDENT_ID, S.STUDENT_NAME
FROM COURSE C 
LEFT JOIN STUDENT S
ON C.COURSE_ID = S.STUDENT_COURSE_ID;


SELECT C.COURSE_ID , C.COURSE_NAME , C.COURSE_DESC ,S.STUDENT_ID,S.STUDENT_NAME ,S.STUDENT_COURSE_ID 
FROM COURSE C
LEFT JOIN STUDENT S 
ON C.COURSE_ID = S.STUDENT_COURSE_ID 
WHERE S.STUDENT_ID IS NULL;


-- 3. RIGHT JOIN
-- The RIGHT JOIN returns all rows from the right table regardless of having matching rows from the left table or not.
SELECT C.COURSE_ID , C.COURSE_NAME , C.COURSE_DESC ,S.STUDENT_ID,S.STUDENT_NAME ,S.STUDENT_COURSE_ID 
FROM COURSE C
RIGHT JOIN STUDENT S 
ON C.COURSE_ID = S.STUDENT_COURSE_ID 
WHERE C.COURSE_ID IS NULL;


-- 4. CROSS JOIN
-- The CROSS JOIN clause returns a Cartesian product of rows from the joined tables.
-- It includes all rows from both tables, where each row is the combination of the row in the first table with the row in the second table.
SELECT C.COURSE_ID, C.COURSE_NAME, C.COURSE_DESC, S.STUDENT_ID, S.STUDENT_NAME, S.STUDENT_COURSE_ID 
FROM COURSE C
CROSS JOIN STUDENT S 
ON C.COURSE_ID = S.STUDENT_COURSE_ID;



/* -------------- INDEXING ----------------- */

/* 
MySQL uses indexes to quickly find rows with specific column values. Without an index, MySQL must scan the whole table to locate the relevant rows. 
The larger table, the slower it searches.
It searches in an optimized way
*/

CREATE TABLE IF NOT EXISTS COURSE1 (
	COURSE_ID INT ,
	COURSE_NAME VARCHAR(50),
	COURSE_DESC VARCHAR(60),
	COURSE_TAG VARCHAR(50),
	INDEX(COURSE_ID)
);

INSERT INTO COURSE1 VALUES
(101 , 'FSDA' , 'FULL STACK DATA ANALYTICS' , 'ANALYTICS'),
(102 , 'FSDS' , 'FULL STACK DATA ANALYTICS' , 'ANALYTICS'),
(103 , 'FSDS' , 'FULL STACK DATA SCIENCE' , 'DS'),
(104 , 'BIG DATA' , 'FULL STACK BIG DATA' , 'BD'),
(105 , 'MERN' , 'WEB DEV' , 'MERN'),
(106 , 'BLOCKCHAIN' , 'FULL STACK BLOCKCHAIN' , 'BC'),
(101 , 'JAVA' , 'FULL STACK JAVA' , 'JAVA'),
(102 , 'TESTING' , 'FULL TESTING ' , 'TESTING '),
(105 , 'CYBERSECURITY' , 'FULL STACK CYBERSECURITY' , 'CYBERSECURITY'),
(109 , 'C' , 'C LANGUAGE' , 'C'),
(108 , 'C++' , 'C++ LANGUAGE' , 'LANGUAGE');

SHOW INDEX FROM COURSE1;


CREATE TABLE IF NOT EXISTS COURSE4 (
	COURSE_ID INT ,
	COURSE_NAME VARCHAR(50),
	COURSE_DESC VARCHAR(60),
	COURSE_TAG VARCHAR(50),
	INDEX(COURSE_DESC,COURSE_NAME,COURSE_TAG)
);

INSERT INTO COURSE4 VALUES
(101 , 'FSDA' , 'FULL STACK DATA ANALYTICS' , 'ANALYTICS'),
(102 , 'FSDS' , 'FULL STACK DATA ANALYTICS' , 'ANALYTICS'),
(103 , 'FSDS' , 'FULL STACK DATA SCIENCE' , 'DS'),
(104 , 'BIG DATA' , 'FULL STACK BIG DATA' , 'BD'),
(105 , 'MERN' , 'WEB DEV' , 'MERN'),
(106 , 'BLOCKCHAIN' , 'FULL STACK BLOCKCHAIN' , 'BC'),
(101 , 'JAVA' , 'FULL STACK JAVA' , 'JAVA'),
(102 , 'TESTING' , 'FULL TESTING ' , 'TESTING '),
(105 , 'CYBERSECURITY' , 'FULL STACK CYBERSECURITY' , 'CYBERSECURITY'),
(109 , 'C' , 'C LANGUAGE' , 'C'),
(108 , 'C++' , 'C++ LANGUAGE' , 'LANGUAGE');

SHOW INDEX FROM COURSE4;

SELECT * FROM COURSE4 WHERE COURSE_ID = 106;


/* --------- UNION ----------- */
-- UNION combines the result from multiple SELECT statements into a single result set. 
-- No. of columns from both the tables should be same.
SELECT COURSE_ID, COURSE_NAME FROM COURSE;
SELECT STUDENT_ID, STUDENT_NAME FROM STUDENT;

SELECT * FROM STUDENT;
SELECT COURSE_ID, COURSE_NAME FROM COURSE
UNION
SELECT STUDENT_ID, STUDENT_NAME FROM STUDENT;



/* ------- cte (common table expressions) ------- */

WITH SAMPLE_STUDENTS AS (
	SELECT * FROM COURSE WHERE COURSE_ID IN (101,102,106)
)
SELECT * FROM SAMPLE_STUDENTS WHERE COURSE_TAG = 'JAVA';

WITH OUTCOME_CROSS AS (
	SELECT C.COURSE_ID, C.COURSE_NAME, C.COURSE_DESC, S.STUDENT_ID, S.STUDENT_NAME, S.STUDENT_COURSE_ID
FROM COURSE C CROSS JOIN STUDENT S )
SELECT COURSE_ID, COURSE_NAME, STUDENT_ID FROM OUTCOME_CROSS WHERE STUDENT_ID = 301;

SELECT 1 AS COL1;
